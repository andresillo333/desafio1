#include <LiquidCrystal.h>

// Declaración de funciones
float* square(float peak);
float* Datos_ondas(float* wave);
void cambiar_datos(float* wave, float* matriz_datos);
void sense(float* matriz_datos);
void liberar_memoria(float* matriz_datos);

// Variables globales
float* wave = nullptr; // Puntero único a los datos de la onda
float* datos_ondas = nullptr;

bool inicializacion = false;
int slope, y1, y;  // Valores de la pendiente y coordenadas en y
unsigned long time_s, time_f;  // Contienen el tiempo inicial y final
bool pass = false;  // Permite identificar la continuidad o no del análisis de los datos
bool start = false, finish = false;  // Controlan el inicio y finalización de análisis de los datos

LiquidCrystal lcd_1(12, 11, 5, 4, 3, 2);

void setup() {
  pinMode(A0, INPUT);  // Recepción continua de datos
  pinMode(7, INPUT);   // Botón de inicio
  pinMode(6, INPUT);   // Botón de fin
  Serial.begin(9600);
  lcd_1.begin(16, 2);
}

void loop() {
  start = digitalRead(7) == HIGH;
  finish = digitalRead(6) == HIGH;
  y1 = analogRead(A0);  // Recibimos un dato del generador
  slope = 0;  // Asignar directamente si no se utiliza

  if (start) {  // Botón de inicio presionado
    Serial.println("Se presionó el botón de inicio");
    time_s = millis();  // Tiempo de inicio
    pass = true;  // Permite análisis de datos
  }

  while (pass) {
    finish = digitalRead(6) == HIGH;
    if (finish) {
      time_f = millis();  // Tiempo de finalización
      pass = false;  // Negamos el análisis de datos
      break;
    }

    delay(50);  // Añadir un pequeño retraso para evitar lecturas continuas rápidas
    y1 = analogRead(A0);  // Lee el valor analógico
    float max_val = 0;

    // Detectar el pico de la onda
    while (max_val < y1) {
      max_val = y1;
      y1 = analogRead(A0);
    }

    Serial.print("Valor máximo: ");
    Serial.println(max_val);

    // Detectar posible onda cuadrada
    if (y1 == max_val) {
     Serial.println("Posible onda cuadrada detectada");
     int cont = 0;

      
      while (y1 == max_val && cont < 2 ) {
        cont++;
        y1 = analogRead(A0);

        
        if (y1 == max_val && cont == 2 ) {
          Serial.println("En efecto, tenemos una onda cuadrada");
          wave = square(max_val);

          if (wave == nullptr) {
            Serial.println("Error: square retornó nullptr");
            break;
         }

          if (!inicializacion) {
            datos_ondas = Datos_ondas(wave);
            inicializacion = true;
          } else {
            cambiar_datos(wave, datos_ondas);
          }

          // Liberar memoria de wave después de usarla
          delete[] wave;
          wave = nullptr;

          if (finish) {
            sense(datos_ondas);  // Mostrar los datos en la LCD
            liberar_memoria(datos_ondas);  // Liberar memoria
            datos_ondas = nullptr;
            inicializacion = false;
            break;
          }
        }
      }
    }
  }
}

float* square(float peak) {
  Serial.print("Logramos entrar   |   ");
  Serial.print("Valor del pico: ");
  Serial.println(peak);

  float* wave_data = new float[4]();  // {t_elapsed, type, amplitude, frequency}
  unsigned long t_start, t_finish;
  float frequency;
  int y_value, valley, amplitude, t_elapsed, ciclos = 0;
  bool found = false;

  y_value = analogRead(A0);

  // Búsqueda del valor del valle con tolerancia al ruido
  while (!found) {
    valley = y_value - 1;
    y_value = analogRead(A0);
    if (y_value < (valley - 2)) {  // Tolerancia al ruido
      valley = y_value;
      found = true;
    }
  }

  amplitude = (peak - valley) / 2;
  *(wave_data + 2) = amplitude;

  bool step1 = false, step2 = false;
  t_start = millis();

  while ((y_value == peak || y_value == valley) && !finish) {
    finish = digitalRead(6) == HIGH;
    y_value = analogRead(A0);

    if (y_value == valley) {
      step1 = true;
    }
    if (step1 && y_value == peak) {
      step2 = true;
    }
    if (step2 && y_value == valley) {
      step1 = false;
      step2 = false;
      ciclos += 1;
    }

    if (finish) {
      t_finish = millis();
      t_elapsed = t_finish - t_start;
      frequency = (ciclos * 1000.0) / t_elapsed;  // Hz
      *(wave_data + 0) = t_elapsed; 
      *(wave_data + 3) = frequency;

      Serial.println("------------Data info-----------");
      Serial.print("Amplitud: ");
      Serial.println(amplitude);
      Serial.print("Frecuencia: ");
      Serial.println(frequency);
      Serial.print("Tiempo transcurrido: ");
      Serial.println(t_elapsed);

      pass = false;
      break;
    }
  }

  *(wave+1) = 1;  // Tipo de onda cuadrada
  return wave_data;
}

float* Datos_ondas(float* wave) {
   float* matriz_datos = new float[4];
    float* ptr = matriz_datos;

    // Copiar los datos usando aritmética de punteros
    *ptr = *(wave + 0);           // Tiempo transcurrido
    *(ptr + 1) = *(wave + 3);     // Frecuencia
    *(ptr + 2) = *(wave + 2);     // Amplitud
    *(ptr + 3) = *(wave + 1);     // Tipo

    return matriz_datos;
}

void cambiar_datos(float* wave, float* matriz_datos) {
   float* ptr = matriz_datos;

    // Comparar la frecuencia
    if (*(wave+0) > *(ptr+0)) { // Si el tiempo es mayor
        // Actualizar los datos usando aritmética de punteros
        *(ptr + 0) = *(wave + 0); // Tiempo transcurrido
        *(ptr + 1) = *(wave + 3); // Frecuencia
        *(ptr + 2) = *(wave + 2); // Amplitud
        *(ptr + 3) = *(wave + 1); // Tipo
    }
   else {
    Serial.println("El tiempo nuevo es menor o igual, no se actualizan los datos.");
  }
}

void sense(float* matriz_datos) {
  float* ptr = matriz_datos;

    // Mostrar en Serial
    Serial.print("Tiempo: ");
    Serial.println(*ptr);
    Serial.print("Tipo: ");
    Serial.println(*(ptr + 3));
    Serial.print("Amplitud: ");
    Serial.println(*(ptr + 2));
    Serial.print("Frecuencia: ");
    Serial.println(*(ptr + 1));
    
    // Mostrar en LCD
    lcd_1.setCursor(0, 0);
    lcd_1.print("T: ");
    lcd_1.print(*(ptr+3)); // Tipo de onda

    lcd_1.setCursor(8, 0);
    lcd_1.print("F: ");
    lcd_1.print(*(ptr + 1)); // Frecuencia

    lcd_1.setCursor(0, 1);
    lcd_1.print("A: ");
    lcd_1.print(*(ptr + 2)); // Amplitud
}

void liberar_memoria(float* matriz_datos) {
  delete[] matriz_datos;
  Serial.println("Memoria liberada.");
}
